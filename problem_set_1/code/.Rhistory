annual_data <- annual_data[, which(colnames(annual_data) %in% save_vars)]
annual_pd_ratio <- ggplot(data = na.omit(annual_data), aes(x = date, y = prices/dividends))+
geom_line(color = "blue", size = 2)
annual_pd_ratio
save_vars <- c("date", "prices", "vwretd_annual", "vwretx_annual", "dividends","b1ret",
"t90ret", "cpiret", "real_rf")
annual_data <- annual_data[, which(colnames(annual_data) %in% save_vars)]
annual_pd_ratio <- ggplot(data = na.omit(annual_data), aes(x = date, y = prices/dividends))+
geom_line(color = "blue", size = 2)
annual_pd_ratio
merged_data <- merge(return_data, inflation_tbills_data, by = "date")
annual_data <- merge(return_data, inflation_tbills_data_annual, by = "date")
save_vars <- c("date", "prices", "vwretd_annual", "vwretx_annual", "dividends","b1ret",
"t90ret", "cpiret", "real_rf")
annual_data <- annual_data[, which(colnames(annual_data) %in% save_vars)]
merged_data <- merge(return_data, inflation_tbills_data, by = "date")
annual_data <- merge(return_data, inflation_tbills_data_annual, by = "date")
save_vars <- c("date", "prices", "vwretd", "vwretx", "dividends","b1ret",
"t90ret", "cpiret", "real_rf")
annual_data <- annual_data[, which(colnames(annual_data) %in% save_vars)]
annual_pd_ratio <- ggplot(data = na.omit(annual_data), aes(x = date, y = prices/dividends))+
geom_line(color = "blue", size = 2)
annual_inflation_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = cpiret))+
geom_line(color = "blue", size = 2)
annual_real_rf <- ggplot(data = na.omit(annual_data), aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2)
annual_inflation_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = cpiret))+
geom_line(color = "blue", size = 2)
annual_pd_ratio
annual_inflation_plot
annual_real_rf
annual_real_rf <- ggplot(data = na.omit(annual_data), aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 1)
annual_real_rf
annual_real_rf <- ggplot(data = na.omit(annual_data), aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 1.5)
annual_real_rf
annual_inflation_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = cpiret))+
geom_line(color = "blue", size = 2)
annual_inflation_plot
prices_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = prices/dividends))+
geom_line(color = "blue", size = 2)
dividends_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = prices/dividends))+
geom_line(color = "blue", size = 2)
prices_plot
prices_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = prices))+
geom_line(color = "blue", size = 2)
dividends_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2)
dividends_plot
prices_plot
##############################################
# COnstruct data using only annual CRSP data #
##############################################
# housekeeping
rm(list = ls())
library(gridExtra)
library(ggplot2)
theme_set(theme_bw())
#######################
# load data from CRSP #
#######################
return_data <- read.csv("../data/returns_annual.csv", stringsAsFactors = F)
return_data$date <- as.Date(as.character(return_data$date), format =  "%Y%m%d")
return_data$month <- as.numeric(as.factor(months(return_data$date)))
inflation_tbills_data <- read.csv("../data/inflation_tbills.csv", stringsAsFactors = F)
inflation_tbills_data$date <- as.Date(as.character(inflation_tbills_data$date), format =  "%Y%m%d")
return_data$month <- as.numeric(format(return_data$date,"%m"))
inflation_tbills_data$month <- as.numeric(format(inflation_tbills_data$date,"%m"))
inflation_tbills_data_annual <- read.csv("../data/inflation_tbill_annual.csv", stringsAsFactors = F)
inflation_tbills_data_annual$date <- as.Date(as.character(inflation_tbills_data_annual$date), format =  "%Y%m%d")
#############################################
# recursively calculate prices and dividends#
#############################################
return_data$prices <- NA
return_data$dividends <- NA
# Assume P(0) = 1 to get t=1 prices and dividends
return_data$prices[1] <- (1 + return_data$vwretx[1])
return_data$dividends[1] <-  return_data$vwretd[1] - return_data$vwretx[1]
# use recursive identity to get price and dividend data
for(i in 2:nrow(return_data)){
return_data$prices[i] <- return_data$prices[i-1]*(1 + return_data$vwretx[i])
return_data$dividends[i] <- return_data$prices[i-1] * (return_data$vwretd[i] - return_data$vwretx[i])
}
prices_all_plot <- ggplot(data = na.omit(return_data), aes(x = date, y = prices))+
geom_line(color = "blue", size = 2)
dividend_all_plot <- ggplot(data = na.omit(return_data), aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2)
###################################################
# estimate AR1 process to get expeceted inflation #
###################################################
# annual expected inflation
pi_t <- inflation_tbills_data_annual$cpiret[2:nrow(inflation_tbills_data_annual)]
pi_lag <- inflation_tbills_data_annual$cpiret[1:(nrow(inflation_tbills_data_annual)-1)]
ar1 <- summary(lm(pi_t~ pi_lag))
intercept <- ar1$coefficients["(Intercept)", "Estimate"]
ar_coef <- ar1$coefficients["pi_lag", "Estimate"]
inflation_tbills_data_annual$exp_inflation_quarterly <- NA
for(i in 2:nrow(inflation_tbills_data_annual)){
prev_pi <- inflation_tbills_data_annual$cpiret[(i-1)]
inflation_tbills_data_annual$exp_inflation_quarterly[i] <- intercept + ar_coef * prev_pi
}
inflation_tbills_data_annual$real_rf <- inflation_tbills_data_annual$t90ret - inflation_tbills_data_annual$exp_inflation_quarterly
#########################
# Plots and export data #
#########################
merged_data <- merge(return_data, inflation_tbills_data, by = "date")
annual_data <- merge(return_data, inflation_tbills_data_annual, by = "date")
save_vars <- c("date", "prices", "vwretd", "vwretx", "dividends","b1ret",
"t90ret", "cpiret", "real_rf")
annual_data <- annual_data[, which(colnames(annual_data) %in% save_vars)]
prices_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = prices))+
geom_line(color = "blue", size = 2)
dividends_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2)
annual_pd_ratio <- ggplot(data = na.omit(annual_data), aes(x = date, y = prices/dividends))+
geom_line(color = "blue", size = 2)
annual_inflation_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = cpiret))+
geom_line(color = "blue", size = 2)
annual_real_rf <- ggplot(data = na.omit(annual_data), aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 1.5)
annual_inflation_plot <- ggplot(data = na.omit(annual_data), aes(x = date, y = cpiret))+
geom_line(color = "blue", size = 2)
write.csv(annual_data, "../data/data_annual.csv", row.names = F)
####################################
# Question 2: Return predictability#
####################################
rm(list = ls())
library(ggplot2) # for plotting
library(sandwich) # for standard errors
library(zoo)
theme_set(theme_bw(base_size = 18))
######################
# load / format data #
######################
stock_data <- read.csv("../data/data_annual.csv")
stock_data$date <- as.Date(stock_data$date, format = "%Y-%m-%d")
#subset to match the Dog that did not bark
#stock_data <- stock_data[which(stock_data$date<as.Date("2007-01-01")), ]
###########################################################
# calculate regression data (log returns, dividend yield) #
###########################################################
cum_div_log_return <- log(stock_data$vwretd_annual + 1)
ex_div_log_return <- log(stock_data$vwretx_annual + 1)
log_real_rf <- log(stock_data$real_rf + 1)
div_yield <- log(stock_data$dividends_annual/stock_data$prices)
# check price dividend ratio
ggplot(data = stock_data, aes(x = date, y = log(dividends_annual/prices)))+
geom_line(color = "blue", size = 2) +
labs(x = "", y = "log(D/P)")
# specify return horizons in year
horizons <- c(1:5, 10)
# set up matrices to store regression summary statistics
stats <- c("b", "t(b)", "r2")
summary_mat_returns <- matrix(data = NA, nrow = length(horizons), ncol = length(stats))
rownames(summary_mat_returns) <- horizons; colnames(summary_mat_returns) <- stats
########################################
# run equation by equation regressions #
########################################
row<-1
for(h in horizons){
# calculate future returns
returns <- matrix(data = NA, nrow = length(cum_div_log_return), ncol = 1)
for(i in 1 :(length(cum_div_log_return)-h)){
returns[i, 1] <- sum(cum_div_log_return[(i+1):(i+h)])
}
# run regressions for forecasting returns
fit <- lm(returns ~ div_yield)
coefficients <- lmtest::coeftest(fit, vcov. = sandwich)
summary_mat_returns[row, 1] <- coefficients["div_yield", "Estimate"]
summary_mat_returns[row, 2] <- coefficients["div_yield", "t value"]
summary_mat_returns[row, 3] <- summary(fit)$r.squared
row <- row + 1
}
######################
# Figures and Tables #
######################
stargazer::stargazer(summary_mat_returns, colnames = T,
rownames = T, title = "Return Regressions")
stargazer::stargazer(summary_mat_dividends, colnames = T,
rownames = T, title = "Dividend Growth Regressions")
stock_data$dividend_yield <- div_yield
dyield_plot <- ggplot(data = stock_data, aes(x = date, y = dividend_yield))+
geom_line(color = "blue", size = 2) +
labs(x = "", y = "Log(D/P)")
return_plot <- ggplot(data = stock_data, aes(x = date, y = ex_div_log_return))+
geom_line(color = "blue", size = 2) +
labs(x = "", y = "Ex div return (quarterly)")
div_plot <- ggplot(data = stock_data, aes(x = date, y = smoothed_dividends))+
geom_line(color = "blue", size = 2) +
labs(x = "", y = "Dividends (quarterly)")
grid.arrange(
dyield_plot, return_plot, div_plot,
layout_matrix = rbind(c(1, 1) ,
c(2, 3))
)
rm(list = ls())
library(ggplot2) # for plotting
library(sandwich) # for standard errors
library(zoo)
theme_set(theme_bw(base_size = 18))
stock_data <- read.csv("../data/data_annual.csv")
stock_data$date <- as.Date(stock_data$date, format = "%Y-%m-%d")
cum_div_log_return <- log(stock_data$vwretd_annual + 1)
ex_div_log_return <- log(stock_data$vwretx_annual + 1)
log_real_rf <- log(stock_data$real_rf + 1)
div_yield <- log(stock_data$dividends_annual/stock_data$prices)
log_real_rf <- log(stock_data$real_rf + 1)
cum_div_log_return <- log(stock_data$vwretd + 1)
ex_div_log_return <- log(stock_data$vwretx + 1)
log_real_rf <- log(stock_data$real_rf + 1)
div_yield <- log(stock_data$dividends_annual/stock_data$prices)
div_yield <- log(stock_data$dividends/stock_data$prices)
div_yield
ggplot(data = stock_data, aes(x = date, y = log(dividends_annual/prices)))+
geom_line(color = "blue", size = 2) +
labs(x = "", y = "log(D/P)")
ggplot(data = stock_data, aes(x = date, y = log(dividends/prices)))+
geom_line(color = "blue", size = 2) +
labs(x = "", y = "log(D/P)")
horizons <- c(1:5, 10)
stats <- c("b", "t(b)", "r2")
summary_mat_returns <- matrix(data = NA, nrow = length(horizons), ncol = length(stats))
rownames(summary_mat_returns) <- horizons; colnames(summary_mat_returns) <- stats
row<-1
for(h in horizons){
# calculate future returns
returns <- matrix(data = NA, nrow = length(cum_div_log_return), ncol = 1)
for(i in 1 :(length(cum_div_log_return)-h)){
returns[i, 1] <- sum(cum_div_log_return[(i+1):(i+h)])
}
# run regressions for forecasting returns
fit <- lm(returns ~ div_yield)
coefficients <- lmtest::coeftest(fit, vcov. = sandwich)
summary_mat_returns[row, 1] <- coefficients["div_yield", "Estimate"]
summary_mat_returns[row, 2] <- coefficients["div_yield", "t value"]
summary_mat_returns[row, 3] <- summary(fit)$r.squared
row <- row + 1
}
stargazer::stargazer(summary_mat_returns, colnames = T,
rownames = T, title = "Return Regressions")
stargazer::stargazer(summary_mat_dividends, colnames = T,
rownames = T, title = "Dividend Growth Regressions")
summary_mat_returns
#################################################################
# Question 4: VAR of log(D/P), log(D_{t+1}/D_t), risk free rate #
#################################################################
rm(list = ls())
library(astsa)
library(vars)
################################################
# Load data / calculate ratios and check plots #
################################################
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
# calculate log pd ratios
stock_data$log_div_price_ratio <- log(stock_data$dividends_annual/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends_annual[2:n]) - log(stock_data$dividends_annual[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
ggplot(data = stock_data, aes(x = date, y = dividends_annual))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
###########
# Run VAR #
###########
# specify VAR variables
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = log(1+stock_data$real_rf))
X <- X[-1, ] # drop observations with NAs (this is sloppy, but just the first observation in this case)
# estimate VAR(1) with constant term
out <- VAR(X, p = 1, type = 'const')
summary(out)
stargazer::stargazer(round(coeftest(out, vcov. = sandwich), 3))
rm(list = ls())
library(astsa)
library(vars)
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
stock_data$log_div_price_ratio <- log(stock_data$dividends_annual/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends_annual[2:n]) - log(stock_data$dividends_annual[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
stock_data$log_div_price_ratio <- log(stock_data$dividends_annual/stock_data$prices)
stock_data$log_div_price_ratio <- log(stock_data$dividends/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends[2:n]) - log(stock_data$dividends[1:(n-1)]))
stock_data$log_div_price_ratio <- log(stock_data$dividends/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends[2:n]) - log(stock_data$dividends[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
ggplot(data = stock_data, aes(x = date, y = dividends_annual))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = log(1+stock_data$real_rf))
X <- X[-1, ] # drop observations with NAs (this is sloppy, but just the first observation in this case)
out <- VAR(X, p = 1, type = 'const')
summary(out)
#################################################################
# Question 4: VAR of log(D/P), log(D_{t+1}/D_t), risk free rate #
#################################################################
rm(list = ls())
library(astsa)
library(vars)
################################################
# Load data / calculate ratios and check plots #
################################################
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
# calculate log pd ratios
stock_data$log_div_price_ratio <- log(stock_data$dividends/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends[2:n]) - log(stock_data$dividends[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
ggplot(data = stock_data, aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
###########
# Run VAR #
###########
# specify VAR variables
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = stock_data))
X <- X[-1, ] # drop observations with NAs (this is sloppy, but just the first observation in this case)
# estimate VAR(1) with constant term
out <- VAR(X, p = 1, type = 'const')
summary(out)
stargazer::stargazer(round(coeftest(out, vcov. = sandwich), 3))
#################################################################
# Question 4: VAR of log(D/P), log(D_{t+1}/D_t), risk free rate #
#################################################################
rm(list = ls())
library(astsa)
library(vars)
################################################
# Load data / calculate ratios and check plots #
################################################
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
# calculate log pd ratios
stock_data$log_div_price_ratio <- log(stock_data$dividends/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends[2:n]) - log(stock_data$dividends[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
ggplot(data = stock_data, aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
###########
# Run VAR #
###########
# specify VAR variables
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = stock_data)
X <- X[-1, ] # drop observations with NAs (this is sloppy, but just the first observation in this case)
# estimate VAR(1) with constant term
out <- VAR(X, p = 1, type = 'const')
summary(out)
View(X)
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = stock_data)
#################################################################
# Question 4: VAR of log(D/P), log(D_{t+1}/D_t), risk free rate #
#################################################################
rm(list = ls())
library(astsa)
library(vars)
################################################
# Load data / calculate ratios and check plots #
################################################
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
# calculate log pd ratios
stock_data$log_div_price_ratio <- log(stock_data$dividends/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends[2:n]) - log(stock_data$dividends[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
ggplot(data = stock_data, aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
###########
# Run VAR #
###########
# specify VAR variables
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = stock_data)
X <- X[-1, ] # drop observations with NAs (this is sloppy, but just the first observation in this case)
# estimate VAR(1) with constant term
out <- VAR(X, p = 1, type = 'const')
summary(out)
out
rm(list = ls())
library(astsa)
library(vars)
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
stock_data$log_div_price_ratio <- log(stock_data$dividends/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends[2:n]) - log(stock_data$dividends[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
ggplot(data = stock_data, aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = stock_data)
X <- X[-1, ] # drop observations with NAs (this is sloppy, but just the first observation in this case)
out <- VAR(X, p = 1, type = 'const')
summary(out)
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = stock_data)
#################################################################
# Question 4: VAR of log(D/P), log(D_{t+1}/D_t), risk free rate #
#################################################################
rm(list = ls())
library(astsa)
library(vars)
################################################
# Load data / calculate ratios and check plots #
################################################
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
# calculate log pd ratios
stock_data$log_div_price_ratio <- log(stock_data$dividends/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends[2:n]) - log(stock_data$dividends[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
ggplot(data = stock_data, aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = stock_data)
X
#################################################################
# Question 4: VAR of log(D/P), log(D_{t+1}/D_t), risk free rate #
#################################################################
rm(list = ls())
library(astsa)
library(vars)
################################################
# Load data / calculate ratios and check plots #
################################################
stock_data <- read.csv("../data/data_annual.csv", stringsAsFactors = F)
stock_data$date <- as.Date(stock_data$date, date = "%Y/%m/%d")
n <- nrow(stock_data)
# calculate log pd ratios
stock_data$log_div_price_ratio <- log(stock_data$dividends/stock_data$prices)
stock_data$div_growth <- c(NA, log(stock_data$dividends[2:n]) - log(stock_data$dividends[1:(n-1)]))
ggplot(data = stock_data, aes(x = date, y = log_div_price_ratio))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = -3.6)
ggplot(data = stock_data, aes(x = date, y = dividends))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
ggplot(data = stock_data, aes(x = date, y = real_rf))+
geom_line(color = "blue", size = 2) +
geom_hline(yintercept = 0)
X <- data.frame(dp = stock_data$log_div_price_ratio,
dgr = stock_data$div_growth,
rf = stock_data$real_rf)
X <- X[-1, ] # drop observations with NAs (this is sloppy, but just the first observation in this case)
out <- VAR(X, p = 1, type = 'const')
summary(out)
