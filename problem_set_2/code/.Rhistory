Z <- mvrnorm(n = n, mu = rep(0, l), Sigma = sigma_l)
X <- Z%*%gamma + v
# compute Y
Y <- X %*% beta + e
# compute 2SLS estimator
# first stage is to just regress X on Z
P_Z <- Z%*%(t(Z)%*%Z)%*%t(Z)
beta_TSLS <- solve((t(X)%*%t(P_Z)%*%X))%*%t(X)%*%P_Z%*%Y
# compute GMM estimator
Wn <- solve((1/n) * t(Z)%*%Z)
beta_GMM <- solve(((1/n) * t(X) %*% Z)%*%Wn%*%((1/n) * t(Z)%*%X))%*%((1/n) * t(X) %*% Z)%*%Wn%*%((1/n) * t(Z)%*%Y)
estimate_matrix[i, 1] <- beta_TSLS
estimate_matrix[i, 2] <- beta_GMM
estimate_matrix[i, 3] <- sqrt(n)*(beta_TSLS-beta)
estimate_matrix[i, 4] <- sqrt(n)*(beta_GMM-beta)
print(i)
}
summary(estimate_matrix[, 1]) # TSLS summary
summary(estimate_matrix[, 2]) # GMM summary
stargazer(cbind(as.matrix(summary(estimate_matrix[, 1])), as.matrix(summary(estimate_matrix[, 2]))))
summary(estimate_matrix[, 1]) # TSLS summary
summary(estimate_matrix[, 2]) # GMM summary
stargazer(cbind(as.matrix(summary(estimate_matrix[, 1])), as.matrix(summary(estimate_matrix[, 2]))))
asymp_var_GMM <- solve((1/n) * t(X)%*%Z %*% solve((1/n) * t(Z)%*%Z) %*% ((1/n) * t(Z)%*%X))
asymp_var_GMM
x <- seq(-1.5, 1.5, by = 0.05)
GMM_dist <- dnorm(x, mean = 0, sd = sqrt(asymp_var_GMM))
hist(estimate_matrix[, 3], main = "", xlab = "Histogram of standardized TSLS estimate vs limit distribution", breaks = 100)
lines(x, 100*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 4], main = "", xlab = "Histogram of standardized GMM estimate vs limit distribution", breaks = 100)
lines(x, 100*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
estimate_matrix <- matrix(data = NA, nrow = R, ncol = 4)
colnames(estimate_matrix) <- c("TSLS_esimate", "GMM_estimate",
"TSLS_dist", "GMM_dist")
sigma_u <- matrix(data = c(1, 0.5, 1, 0.5), nrow = 2, ncol = 2)
U <- mvrnorm(n = n, mu = rep(0, 2), Sigma = sigma_u)
head(())
head(Z)
gamma
l <- 3; gamma<-0.1
for(i in 1:R){
# compute Z
Z <- mvrnorm(n = n, mu = rep(0, l), Sigma = sigma_l)
# define error terms
sigma_u <- matrix(data = c(1, 0.5, 1, 0.5), nrow = 2, ncol = 2)
U <- mvrnorm(n = n, mu = rep(0, 2), Sigma = sigma_u)
e <- U[, 1]; v <- U[, 2]
# compute X
X <- Z%*%gamma + v
# compute Y
Y <- X %*% beta + e
# compute 2SLS estimator
# first stage is to just regress X on Z
P_Z <- Z%*%(t(Z)%*%Z)%*%t(Z)
beta_TSLS <- solve((t(X)%*%t(P_Z)%*%X))%*%t(X)%*%P_Z%*%Y
# compute GMM estimator
Wn <- solve((1/n) * t(Z)%*%Z)
beta_GMM <- solve(((1/n) * t(X) %*% Z)%*%Wn%*%((1/n) * t(Z)%*%X))%*%((1/n) * t(X) %*% Z)%*%Wn%*%((1/n) * t(Z)%*%Y)
estimate_matrix[i, 1] <- beta_TSLS
estimate_matrix[i, 2] <- beta_GMM
estimate_matrix[i, 3] <- sqrt(n)*(beta_TSLS-beta)
estimate_matrix[i, 4] <- sqrt(n)*(beta_GMM-beta)
print(i)
}
beta <- 1; R <- 5000; l <- 3; gamma_0 <- 2; n<- 500 # parameters of problem
sigma_l <- diag(l)
gamma <- t(gamma_0 %*% rep(1, l))
l <- 3; gamma <- t(gamma_0 %*% rep(0.1, l))
gamma
rep(0.1, l)
l <- 3; gamma <- t(gamma_0 %*% rep(0.1, l))
for(i in 1:R){
# compute Z
Z <- mvrnorm(n = n, mu = rep(0, l), Sigma = sigma_l)
# define error terms
sigma_u <- matrix(data = c(1, 0.5, 1, 0.5), nrow = 2, ncol = 2)
U <- mvrnorm(n = n, mu = rep(0, 2), Sigma = sigma_u)
e <- U[, 1]; v <- U[, 2]
# compute X
X <- Z%*%gamma + v
# compute Y
Y <- X %*% beta + e
# compute 2SLS estimator
# first stage is to just regress X on Z
P_Z <- Z%*%(t(Z)%*%Z)%*%t(Z)
beta_TSLS <- solve((t(X)%*%t(P_Z)%*%X))%*%t(X)%*%P_Z%*%Y
# compute GMM estimator
Wn <- solve((1/n) * t(Z)%*%Z)
beta_GMM <- solve(((1/n) * t(X) %*% Z)%*%Wn%*%((1/n) * t(Z)%*%X))%*%((1/n) * t(X) %*% Z)%*%Wn%*%((1/n) * t(Z)%*%Y)
estimate_matrix[i, 1] <- beta_TSLS
estimate_matrix[i, 2] <- beta_GMM
estimate_matrix[i, 3] <- sqrt(n)*(beta_TSLS-beta)
estimate_matrix[i, 4] <- sqrt(n)*(beta_GMM-beta)
print(i)
}
summary(estimate_matrix[, 1]) # TSLS summary
summary(estimate_matrix[, 2]) # GMM summary
stargazer(cbind(as.matrix(summary(estimate_matrix[, 1])), as.matrix(summary(estimate_matrix[, 2]))))
asymp_var_GMM <- solve((1/n) * t(X)%*%Z %*% solve((1/n) * t(Z)%*%Z) %*% ((1/n) * t(Z)%*%X))
x <- seq(-1.5, 1.5, by = 0.05)
GMM_dist <- dnorm(x, mean = 0, sd = sqrt(asymp_var_GMM))
plot(x, GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 3], main = "", xlab = "Histogram of standardized TSLS estimate")
hist(estimate_matrix[, 4], main = "", xlab = "Histogram of standardized GMM estimate")
GMM_dist
x <- seq(-1.5, 1.5, by = 0.05)
GMM_dist <- dnorm(x, mean = 0, sd = sqrt(asymp_var_GMM))
hist(estimate_matrix[, 3], main = "", xlab = "Histogram of standardized TSLS estimate vs limit distribution", breaks = 100)
lines(x, 100*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
x <- seq(-15, 15, by = 0.05)
GMM_dist <- dnorm(x, mean = 0, sd = sqrt(asymp_var_GMM))
hist(estimate_matrix[, 3], main = "", xlab = "Histogram of standardized TSLS estimate vs limit distribution", breaks = 100)
lines(x, 100*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
GMM_dist
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
lines(x, 10000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 3], main = "", xlab = "Histogram of standardized TSLS estimate vs limit distribution", breaks = 100)
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 4], main = "", xlab = "Histogram of standardized GMM estimate vs limit distribution", breaks = 100)
lines(x, 100*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 4], main = "", xlab = "Histogram of standardized GMM estimate vs limit distribution", breaks = 100)
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
par(mar = c(5.4, 5.1, 1, 1))
par(ps = 23)
hist(estimate_matrix[, 3], main = "", xlab = "Histogram of standardized TSLS estimate vs limit distribution", breaks = 100)
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 4], main = "", xlab = "Histogram of standardized GMM estimate vs limit distribution", breaks = 100)
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 3], main = "", xlab = "TSLS estimate vs limit distribution", breaks = 100)
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 4], main = "", xlab = "GMM estimate vs limit distribution", breaks = 100)
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 3], main = "", xlab = "TSLS", breaks = 100)
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
hist(estimate_matrix[, 4], main = "", xlab = "GMM", breaks = 100)
lines(x, 1000*GMM_dist, type = "l", col = "blue", lwd = 3, ylab = "Density", xlab = "")
par(mar = c(5.4, 5.1, 1, 1))
library(vars)
install.packages("vars")
install.packages("atsa")
install.packages("astsa")
library(vars)
library(astsa)
x = cbind(cmort, tempr, part)
rm(list = ls())
library(vars)
library(astsa)
x = cbind(cmort, tempr, part)
summary(VAR(x, p = 1, type = 'both'))
summary(VAR(x, p = 2, type = 'both'))
out <- summary(VAR(x, p = 2, type = 'both'))
out$covres
out$names
out$varresult
out$varresult$cmort
VARselect(x, lag.max=10, type = "both")
acf(resid(fit, 52))
summary(fit <- VAR(x, p = 2, type = 'both')) #BIC selected Model
acf(resid(fit, 52))
serial.test(fit, lags.pt=12, tyype = "PT.adjusted")
serial.test(fit, lags.pt=12, type = "PT.adjusted")
library(quantmod)
rm(list = ls())
library(quantmod)
getSymbols('CPIAUCNS',src='FRED')
View(CPIAUCNS)
rm(list = ls())
library(quantmod)
getSymbols('HOUST',src='FRED')
getSymbols('HOUST',src='FRED')
rm(list = ls())
rm(list = ls())library(quantmod)
rm(list = ls())
library(quantmod)
getSymbols('HOUST',src='FRED')
ggplot(HOUST, aes(x = Index, y = value)) + geom_point()
theme_set(size = 18)
library(ggplot2)
theme_set(size = 18)
rm(list = ls())
library(quantmod)
library(ggplot2)
theme_set(theme_bw(base_size = 18))
getSymbols('HOUST',src='FRED')
ggplot(HOUST, aes(x = Index, y = value)) + geom_point()
ggplot(HOUST, aes(x = index, y = value)) + geom_point()
ggplot(HOUST, aes(x = updated, y = Data)) + geom_point()
houst <- getSymbols('HOUST',src='FRED')
rm(list = ls())
library(quantmod)
library(ggplot2)
theme_set(theme_bw(base_size = 18))
houst <- getSymbols('HOUST',src='FRED')
houst
houst <- as.data.frame(HOUST)
getSymbols('HOUST',src='FRED')
houst <- as.data.frame(HOUST)
View(houst)
View(HOUST)
head(HOUST)
houst <- data.frame(date = rownames(HOUST), houst = HOUST)
rownames(HOUST)
rownames(HOUST)
as.Date(rownames(HOUST))
rownames(HOUST)
?getSymbols
index(HOUST)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
ggplot(HOUST, aes(x = date, y = houst)) + geom_point()
ggplot(HOUST, aes(x = date, y = HOUST)) + geom_point()
ggplot(houst, aes(x = date, y = HOUST)) + geom_point()
ggplot(houst, aes(x = date, y = HOUST)) + geom_line()
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue") + + xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue") +  xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue") +  xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 2) +  xlab("") +
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 2) +  xlab("") + geom_smooth
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 2) +  xlab("") + geom_smooth
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 2) +  xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 1.5) +  xlab("")
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
windows.options(antialias = "cleartype")
rm(list = ls())
library(quantmod)
library(ggplot2)
theme_set(theme_bw(base_size = 18))
getSymbols('HOUST', src='FRED')
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
ggplot(houst, aes(x = date, y = HOUST)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
options(device = Cairo::CairoWin)
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
housing_data
ggplot(housing_data, aes(x = date, y = data)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
library(reshape2)
theme_set(theme_bw(base_size = 18))
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = variable)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
View(housing_data)
ggplot(data_long, aes(x = date, y = value)) +
geom_line(colour = "blue", size = 1.25) +  xlab("")
ggplot(data_long, aes(x = date, y = value)) +
geom_line(size = 1.25) +  xlab("")
View(data_long)
View(housing_data)
matplot(housing_data[, -1])
matplot(housing_data[, -1], type = "l")
ggplot(data_long, aes(x = date, y = value)) +
geom_line(size = 1.25) +  xlab("")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
library(VAR)
library(vars)
X <- housing_data[, -1]
X <- matrix(housing_data[, -1])
model <- VAR(X)
X <- as.matrix(housing_data[, -1])
model <- VAR(X)
Bcoef(model)
model <- VAR(y = X, p = 4, type = "const")
Bcoef(model)
summary(model)
model_summary <- summary(model)
irf(model)
plot(irf(model))
plot(irf(model))
summary(model)
acf(resid(fit), 52)
acf(resid(model), 12)
acf(resid(model), 48)
acf(resid(model), 48)
X <- housing_data[, -1])
X <- housing_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
acf(resid(model), 48)
acf(resid(model), 48)
# set up environment
rm(list = ls())
library(quantmod)
library(ggplot2)
library(reshape2)
library(vars)
theme_set(theme_bw(base_size = 18))
# pull data from FRED
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
# format/plot data
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
# run VAR
X <- housing_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
# examine residuals
acf(resid(model), 48)
serial.test(model, lags.pt=12, type = "PR.adjusted")
serial.test(model, lags.pt=12, type = "PT.adjusted")
spectrum(X, ..., method = c("pgram", "ar"))
spectrum(X,  method = c("pgram", "ar"))
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
fit.pr <- predict(model, n.ahead = 48, ci = 0.95)
fanchart(fit.pr)
fit.pr <- predict(model, n.ahead = 96, ci = 0.95)
fanchart(fit.pr)
12
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
X <- housing_data[, -1]
nobs <- nrow(housing_data)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
training_data <- housing_data[1:(nrow(housing_data)-1)]
training_data <- housing_data[1:(nobs-1)]
nobs <- nrow(housing_data)
training_data <- housing_data[1:(nobs-12)]
training_data <- housing_data[1:(nobs-12),]
training_data <- housing_data[1:(nobs-12), ]
rm(list = ls())
library(quantmod)
library(ggplot2)
library(reshape2)
library(vars)
theme_set(theme_bw(base_size = 18))
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
nobs <- nrow(housing_data)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
training_data <- housing_data[1:(nobs-12), ]
X <- housing_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
acf(resid(model), 48)
serial.test(model, lags.pt=12, type = "PT.adjusted")
spectrum(X,  method = c("pgram", "ar"))
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
# set up environment
rm(list = ls())
library(quantmod)
library(ggplot2)
library(reshape2)
library(vars)
theme_set(theme_bw(base_size = 18))
# pull data from FRED
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
# format/plot data
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
nobs <- nrow(housing_data)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
# drop last 12 observations to be the out of sample forecast comparisons
training_data <- housing_data[1:(nobs-12), ]
# run VAR
X <- training_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
# examine residuals
acf(resid(model), 48)
serial.test(model, lags.pt=12, type = "PT.adjusted")
spectrum(X,  method = c("pgram", "ar"))
# make prediction
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
rm(list = ls())
library(quantmod)
library(ggplot2)
library(reshape2)
library(vars)
theme_set(theme_bw(base_size = 18))
getSymbols(c('HOUST', 'COMPUTSA'), src='FRED')
houscomp <- data.frame(date = as.Date(index(COMPUTSA)), houst = COMPUTSA)
houst <- data.frame(date = as.Date(index(HOUST)), houst = HOUST)
housing_data <- merge(houst, houscomp, by = "date")
nobs <- nrow(housing_data)
data_long <- melt(housing_data, id.vars = "date")
ggplot(data_long, aes(x = date, y = value, colour = variable)) +
geom_line(size = 1.25) +  xlab("") + ylab("Units in thousands")
training_data <- housing_data[1:(nobs-12), ]
X <- training_data[, -1]
model <- VAR(y = X, p = 4, type = "const")
summary(model)
acf(resid(model), 48)
serial.test(model, lags.pt=12, type = "PT.adjusted")
spectrum(X,  method = c("pgram", "ar"))
fit.pr <- predict(model, n.ahead = 12, ci = 0.95)
fanchart(fit.pr)
x_t <- X[[1]]
x_t
i <- z <- complex(real = 0, imaginary = 1)
i
x <- X[[1]]
i <- z <- complex(real = 0, imaginary = 1)
t<- 45
x[t]
get_spec_density <- function(x, w){
Sw <- 0
for(t in 1:length(x)){
Sw <- Sw + exp(-i * w * t) * x[t]
}
}
pi
spec_density <- get_spec_density(x, pi/2)
spec_density
get_spec_density <- function(x, w){
Sw <- 0
for(t in 1:length(x)){
Sw <- Sw + exp(-i * w * t) * x[t]
}
}
spec_density <- get_spec_density(x, pi/2)
spec_density
t <- 6
Sw
exp(-i * w * t)
w = pi/4
exp(-i * w * t)
exp(-i * w * t) * x[t]
length(x)
get_spec_density <- function(x, w){
Sw <- 0
for(t in 1:length(x)){
Sw <- Sw + exp(-i * w * t) * x[t]
}
return(Sw)
}
spec_density <- get_spec_density(x, pi/2)
spec_density
range <- seq(0, 2*pi, by = 0.1)
range
spec_density <- get_spec_density(x, range)
spec_density
plot(range, spec_density)
range <- seq(0.1, 2*pi, by = 0.1)
spec_density <- get_spec_density(x, range)
plot(range, spec_density)
plot(range, spec_density, type = "l")
sqrt(as.complex(-1))
sqrt(-1)
as.complex(-1)
sqrt(as.complex(-1))
tab <- matrix(data = 4, nrow = 4, ncol = 3)
tab
tab <- matrix(data = NA, nrow = 4, ncol = 3)
tba
tab
colnames(tab) <- c("outcomes", "i = low", "i = high")
stargazer(tab)
stargazer::stargazer(tab)
rm(list = ls())
library(reshape2)
setwd("~/OneDrive - PennO365/Classes/2019_Spring/FNCE-921 (Empirical Methods in Finance)/Problem Sets/problem_set_2/code")
rm(list = ls())
library(reshape2)
library(ggplot2)
library(Quandl)
source("functions.R")
theme_set(theme_bw(base_size = 20))
cons_data <- Quandl(c("FRED/PCNDA", "FRED/PCESVA", "FRED/PCECA"),
start_date="1929-01-01",
end_date="2008-12-31",
type="raw")
colnames(cons_data) <- c("date", "non_durables", "services", "level")
cons_data$total <- cons_data$non_durables + cons_data$services
cons_data$total_real <- cons_data$total/cons_data$level
mean(log(cons_data$total_real[2:nobs]) - log(cons_data$total_real[1:(nobs-1)]))
cons_data
cons_data
View(cons_data)
cons_data <- Quandl(c("FRED/PCNDA", "FRED/PCESVA", "FRED/PCECA"),
start_date="1929-01-01",
end_date="2008-12-31",
type="raw")
View(cons_data)
write.csv2(cons_data, "FRED_DATA.csv")
View(cons_data)
write.csv(cons_data, "FRED_DATA.csv")
