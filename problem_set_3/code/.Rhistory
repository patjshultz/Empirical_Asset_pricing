plot(all_estimates[, 6], all_estimates[, 5],
ylim = c(0, max(all_estimates[, 6])), xlim = c(0, max(all_estimates[, 5])),
xlab = expression(beta), ylab = "Mean quarterly return % (BE/ME Portfolios)",
main = "CAPM (BE/ME Portfolios)")
abline(lm(all_estimates[, 6]~all_estimates[, 5] + 0))
# calculate GRS test statistic and critical value for F-distribution
alphas_bm <- bm_estimates[1, ] # t because it needs to be a column vector
residuals_bm <- apply(book_market, 2, return_ols_residuals, model = "CAPM")
CAPM_BEME_GRS <- GRS(alphas_bm, residuals_bm, factors = RX)
alphas_size <- size_estimates[1, ] # t because it needs to be a column vector
residuals_size <- apply(size, 2, return_ols_residuals, model = "CAPM")
CAPM_size_GRS <- GRS(alphas_size, residuals_size, factors = RX)
critical_value <- qf(.95, df1=N, df2=(nobs-N-L))
# allocate to summary stat table
summary_tab[1, 1:3] <- c(CAPM_BEME_GRS, CAPM_size_GRS, critical_value)
#-------------------------- test of FF3 ----------------------------------------
factors <- cbind(FF_factors$RE, FF_factors$SMB, FF_factors$HML)
L <- ncol(factors) # we now have a three factor model rather than just one
N <- 10 # still have the same number of test portfolios
# estimation of FFS model for size and B/M portoflios
bm_estimates <- apply(book_market, 2, return_ols_stats, model = "FF3")
bm_estimates <- rbind(bm_estimates[c(-2, -(4:8)), ], colMeans(book_market))
rownames(bm_estimates) <- c("a", "b", "E(R)")
size_estimates <- apply(size, 2, return_ols_stats, model = "FF3")
size_estimates <- rbind(size_estimates[c(-2, -(4:8)), ], colMeans(size))
rownames(size_estimates) <- c("a", "b", "E(R)")
stargazer::stargazer(cbind(t(bm_estimates), t(size_estimates)))
# plot betas vs expected returns with market price of risk line
plot(size_estimates[2, ], size_estimates[3, ],
ylim = c(0, max(size_estimates[3, ])), xlim = c(0, max(size_estimates[2, ])),
xlab = expression(beta), ylab = "Mean quarterly return % (Size Portfolios)",
main = "FF3  (Size Portfolios)")
abline(lm(size_estimates[3, ]~size_estimates[2, ] + 0))
plot(bm_estimates[2, ], bm_estimates[3, ],
ylim = c(0, max(bm_estimates[3, ])), xlim = c(0, max(bm_estimates[2, ])),
xlab = expression(beta), ylab = "Mean quarterly return % (Size Portfolios)",
main = "FF3 (BE/ME Portfolios)")
abline(lm(bm_estimates[3, ]~bm_estimates[2, ] + 0))
# calculate GRS test statistic and critical value for F-distribution
alphas_bm <- bm_estimates[1, ] # t because it needs to be a column vector
residuals_bm <- apply(book_market, 2, return_ols_residuals, model = "FF3")
FF_BEME_GRS <- GRS(alphas = alphas_bm, residuals = residuals_bm, factors = factors)
alphas_size <- size_estimates[1, ] # t because it needs to be a column vector
residuals_size <- apply(size, 2, return_ols_residuals, model = "FF3")
FF_size_GRS <- GRS(alphas_size, residuals_size, factors)
critical_value <- qf(.95, df1=N, df2=(nobs-N-L))
summary_tab[2, 1:3] <- c(FF_BEME_GRS, FF_size_GRS, critical_value)
#===============================================================================
# Repeat analysis for the past 120 months
#===============================================================================
# index of observations to be used
index <- nobs:(nobs-119)
# subset factors
RX <- FF_factors$RE[index]# excess returns of the market
SMB <- FF_factors$SMB[index]; HML <- FF_factors$HML[index] # additional FF factors
#---------------------------- test of CAPM -------------------------------------
factors <- as.matrix(RX)
L <- ncol(factors) #only factor in capm is systematic risk
N <- 10 # number of test portfolios (i.e. the number of regressions)
# time series regression estimates
bm_estimates <- apply(book_market[index, ], 2, return_ols_stats, model= "CAPM")
rownames(bm_estimates) <- c("alpha", "t(alpha)", "beta", "t(beta)")
size_estimates <- apply(size[index, ], 2, return_ols_stats, model = "CAPM")
rownames(size_estimates) <- c("alpha", "t(alpha)", "beta", "t(beta)")
# plot betas vs expected returns with market price of risk line
plot(all_estimates[, 2], all_estimates[, 3],
ylim = c(0, max(all_estimates[, 3])), xlim = c(0, max(all_estimates[, 2])),
xlab = expression(beta), ylab = "Mean monthly return % (Size Portfolios)" ,
main = "CAPM (Size Portfolios)")
abline(lm(all_estimates[, 3]~all_estimates[, 2] + 0))
plot(all_estimates[, 6], all_estimates[, 5],
ylim = c(0, max(all_estimates[, 6])), xlim = c(0, max(all_estimates[, 5])),
xlab = expression(beta), ylab = "Mean quarterly return % (BE/ME Portfolios)",
main = "CAPM (BE/ME Portfolios)")
abline(lm(all_estimates[, 6]~all_estimates[, 5] + 0))
# calculate GRS test statistic and critical value for F-distribution
alphas_bm <- bm_estimates[1, ] # t because it needs to be a column vector
residuals_bm <- apply(book_market[index, ], 2, return_ols_residuals, model = "CAPM")
CAPM_BEME_GRS <- GRS(alphas_bm, residuals_bm, factors = factors)
alphas_size <- size_estimates[1, ] # t because it needs to be a column vector
residuals_size <- apply(size[index, ], 2, return_ols_residuals, model = "CAPM")
CAPM_size_GRS <- GRS(alphas_size, residuals_size, factors = factors)
critical_value <- qf(.95, df1=N, df2=(nobs-N-L))
summary_tab[3, 1:3] <- c(CAPM_BEME_GRS, CAPM_size_GRS, critical_value)
#---------------------------- test of FF3 --------------------------------------
factors <-  cbind(FF_factors$RE, FF_factors$SMB, FF_factors$HML)
L <- ncol(factors) # we now have a three factor model rather than just one
N <- 10 # still have the same number of test portfolios
# estimation of FFS model for size and B/M portoflios
bm_estimates <- apply(book_market[index, ], 2, return_ols_stats, model = "FF3")
bm_estimates <- rbind(bm_estimates[c(-2, -(4:8)), ], colMeans(book_market))
rownames(bm_estimates) <- c("a", "b", "E(R)")
size_estimates <- apply(size[index, ], 2, return_ols_stats, model = "FF3")
size_estimates <- rbind(size_estimates[c(-2, -(4:8)), ], colMeans(size))
rownames(size_estimates) <- c("a", "b", "E(R)")
stargazer::stargazer(bm_estimates, title = "Fama-French Three Factor Model Test for B/M portfolios")
stargazer::stargazer(size_estimates,  title = "Fama-French Three Factor Model Test for size portfolios")
# plot betas vs expected returns with market price of risk line
plot(size_estimates[2, ], size_estimates[3, ],
ylim = c(0, max(size_estimates[3, ])), xlim = c(0, max(size_estimates[2, ])),
xlab = expression(beta), ylab = "Mean quarterly return % (Size Portfolios)",
main = "FF3  (Size Portfolios)")
abline(lm(size_estimates[3, ]~size_estimates[2, ] + 0))
plot(bm_estimates[2, ], bm_estimates[3, ],
ylim = c(0, max(bm_estimates[3, ])), xlim = c(0, max(bm_estimates[2, ])),
xlab = expression(beta), ylab = "Mean quarterly return % (Size Portfolios)",
main = "FF3 (BE/ME Portfolios)")
abline(lm(bm_estimates[3, ]~bm_estimates[2, ] + 0))
# calculate GRS test statistic and critical value for F-distribution
alphas_bm <- bm_estimates[1, ] # t because it needs to be a column vector
residuals_bm <- apply(book_market[index, ], 2, return_ols_residuals, model= "FF3")
FF_BEME_GRS <- GRS(alphas_bm, residuals_bm, factors = factors)
alphas_size <- size_estimates[1, ] # t because it needs to be a column vector
residuals_size <- apply(size[index, ], 2, return_ols_residuals, model = "FF3")
FF_size_GRS <- GRS(alphas_size, residuals_size, factors = factors)
critical_value <- qf(.95, df1=N, df2=(nobs-N-L))
summary_tab[4, 1:3] <- c(FF_BEME_GRS, FF_size_GRS, critical_value)
#===============================================================================
# Repeat analysis for the past 25 years
#===============================================================================
index <- (nobs-25*12):nobs
# subset factors
RX <- FF_factors$RE[index]# excess returns of the market
SMB <- FF_factors$SMB[index]; HML <- FF_factors$HML[index] # additional FF factors
#---------------------------- test of CAPM -------------------------------------
factors <- as.matrix(RX)
L <- ncol(factors) #only factor in capm is systematic risk
N <- 10 # number of test portfolios (i.e. the number of regressions)
# time series regression estimates
bm_estimates <- apply(book_market[index, ], 2, return_ols_stats, model= "CAPM")
rownames(bm_estimates) <- c("alpha", "t(alpha)", "beta", "t(beta)")
size_estimates <- apply(size[index, ], 2, return_ols_stats, model = "CAPM")
rownames(size_estimates) <- c("alpha", "t(alpha)", "beta", "t(beta)")
# plot betas vs expected returns with market price of risk line
plot(all_estimates[, 2], all_estimates[, 3],
ylim = c(0, max(all_estimates[, 3])), xlim = c(0, max(all_estimates[, 2])),
xlab = expression(beta), ylab = "Mean monthly return % (Size Portfolios)" ,
main = "CAPM (Size Portfolios)")
abline(lm(all_estimates[, 3]~all_estimates[, 2] + 0))
plot(all_estimates[, 6], all_estimates[, 5],
ylim = c(0, max(all_estimates[, 6])), xlim = c(0, max(all_estimates[, 5])),
xlab = expression(beta), ylab = "Mean quarterly return % (BE/ME Portfolios)",
main = "CAPM (BE/ME Portfolios)")
abline(lm(all_estimates[, 6]~all_estimates[, 5] + 0))
# calculate GRS test statistic and critical value for F-distribution
alphas_bm <- bm_estimates[1, ] # t because it needs to be a column vector
residuals_bm <- apply(book_market[index, ], 2, return_ols_residuals, model = "CAPM")
CAPM_BEME_GRS <- GRS(alphas_bm, residuals_bm, factors = factors)
alphas_size <- size_estimates[1, ] # t because it needs to be a column vector
residuals_size <- apply(size[index, ], 2, return_ols_residuals)
CAPM_size_GRS <- GRS(alphas_size, residuals_size, factors = factors)
critical_value <- qf(.95, df1=N, df2=(nobs-N-L))
summary_tab[5, 1:3] <- c(CAPM_BEME_GRS, CAPM_size_GRS, critical_value)
#---------------------------- test of FF3 --------------------------------------
factors <-  cbind(FF_factors$RE, FF_factors$SMB, FF_factors$HML)
L <- ncol(factors) # we now have a three factor model rather than just one
N <- 10 # still have the same number of test portfolios
# estimation of FFS model for size and B/M portoflios
bm_estimates <- apply(book_market[index, ], 2, return_ols_stats, model = "FF3")
bm_estimates <- rbind(bm_estimates[c(-2, -(4:8)), ], colMeans(book_market))
rownames(bm_estimates) <- c("a", "b", "E(R)")
size_estimates <- apply(size[index, ], 2, return_ols_stats, model = "FF3")
size_estimates <- rbind(size_estimates[c(-2, -(4:8)), ], colMeans(size))
rownames(size_estimates) <- c("a", "b", "E(R)")
stargazer::stargazer(bm_estimates, title = "Fama-French Three Factor Model Test for B/M portfolios")
stargazer::stargazer(size_estimates,  title = "Fama-French Three Factor Model Test for size portfolios")
# plot betas vs expected returns with market price of risk line
plot(size_estimates[2, ], size_estimates[3, ],
ylim = c(0, max(size_estimates[3, ])), xlim = c(0, max(size_estimates[2, ])),
xlab = expression(beta), ylab = "Mean quarterly return % (Size Portfolios)",
main = "FF3  (Size Portfolios)")
abline(lm(size_estimates[3, ]~size_estimates[2, ] + 0))
plot(bm_estimates[2, ], bm_estimates[3, ],
ylim = c(0, max(bm_estimates[3, ])), xlim = c(0, max(bm_estimates[2, ])),
xlab = expression(beta), ylab = "Mean quarterly return % (Size Portfolios)",
main = "FF3 (BE/ME Portfolios)")
abline(lm(bm_estimates[3, ]~bm_estimates[2, ] + 0))
# calculate GRS test statistic and critical value for F-distribution
alphas_bm <- bm_estimates[1, ] # t because it needs to be a column vector
residuals_bm <- apply(book_market[index, ], 2, return_ols_residuals, model= "FF3")
FF_BEME_GRS <- GRS(alphas_bm, residuals_bm, factors = factors)
alphas_size <- size_estimates[1, ] # t because it needs to be a column vector
residuals_size <- apply(size[index, ], 2, return_ols_residuals, model = "FF3")
FF_size_GRS <- GRS(alphas_size, residuals_size, factors = factors)
critical_value <- qf(.95, df1=N, df2=(nobs-N-L))
summary_tab[6, 1:3] <- c(FF_BEME_GRS, FF_size_GRS, critical_value)
colnames(summary_tab) <- c("BE/ME", "Size", "Critical Value")
rownames(summary_tab) <- c("CAPM (Full Sample)", "FF3 (Full Sample)",
"CAPM (Last 10 Years)", "FF3 (Last 10 Years)",
"CAPM (Last 25 Years)", "FF3 (Last 25 Years)")
stargazer::stargazer(summary_tab, title = "GRS Statistics")
summary_tab
(nobs-25*12):nobs
#===============================================================================
# Finance 921: Assignment 3
# Question 1 part b
#===============================================================================
rm(list = ls())
library(ggplot2)
library(reshape2)
source("functions.R")
# load data
book_market_returns <- read.csv("../data/BEME_returns_annual.csv",
stringsAsFactors = F,
na.strings = 'NA')
average_beme <- read.csv("../data/average_firm_BEME.CSV",
stringsAsFactors = F,
na.strings = 'NA')[-1,]
size_returns <- read.csv("../data/ME_returns_annual.csv",
stringsAsFactors = F,
na.strings = 'NA')
average_size <- read.csv("../data/average_firm_sizes.csv",
stringsAsFactors = F,
na.strings = 'NA')
FF_factors <- read.csv("../data/FF_factors_annual.csv", stringsAsFactors = F)
nobs <- nrow(book_market_returns)
# subset average size to annual data
annual_ind <- which(average_size$month==12)
average_size <- average_size[annual_ind, -2]
average_size <- average_size[-1, ]
# take logs of data?
#book_market_returns <- log(1 + book_market_returns)
average_beme <- log(average_beme)
#size_returns <- log(1 + size_returns)
average_size <- log(average_size)
#FF_factors <- log(1 + FF_factors)
#===============================================================================
# Step 1: Run TS regressions
#===============================================================================
# fama french factors plus size and book to market ratio
factors <- cbind(FF_factors$Mkt.RF, FF_factors$SMB, FF_factors$HML,
average_size$d5, average_beme$d5)
#
# time series regression for book-to-market sorted portfolios
bm_estimates <- apply(book_market_returns[, -1], 2, ts_regressions)
bm_tab <- rbind(colMeans(book_market_returns[, -1]), bm_estimates)
rownames(bm_tab) <- c("E(R)", "b1", "b2", "b3", "b4", "b5")
# time series regression for size sorted portfolios
size_estimates <- apply(size_returns[, -1], 2, ts_regressions)
size_tab <- rbind(colMeans(size_returns[, -1]), size_estimates)
rownames(size_tab) <- c("E(R)", "b1", "b2", "b3", "b4", "b5")
rm(list = ls())
library(ggplot2)
library(reshape2)
source("functions.R")
book_market_returns <- read.csv("../data/BEME_returns_annual.csv",
stringsAsFactors = F,
na.strings = 'NA')
size_returns <- read.csv("../data/ME_returns_annual.csv",
stringsAsFactors = F,
na.strings = 'NA')
average_size <- read.csv("../data/average_firm_sizes.csv",
stringsAsFactors = F,
na.strings = 'NA')
average_beme <- read.csv("../data/average_firm_BEME.CSV",
stringsAsFactors = F,
na.strings = 'NA')[-1,]
FF_factors <- read.csv("../data/FF_factors_annual.csv", stringsAsFactors = F)
nobs <- nrow(book_market_returns)
annual_ind <- which(average_size$month==12)
average_size <- average_size[annual_ind, -2]
average_size <- average_size[-1, ]
average_beme <- log(average_beme)
average_size <- log(average_size)
factors <- cbind(FF_factors$Mkt.RF, FF_factors$SMB, FF_factors$HML,
average_size$d5, average_beme$d5)
average_size
#===============================================================================
# Finance 921: Assignment 3
# Question 1 part c (test of consumption-based CAPM)
#===============================================================================
rm(list = ls())
library(quantmod)
library(knitr)
#===============================================================================
# Load data
#===============================================================================
# first complete analysis with quarterly data
getSymbols(c("DNDGRA3Q086SBEA", "DSERRA3Q086SBEA"), src='FRED') # quarterly
qrtly_ND <- DNDGRA3Q086SBEA
qrtly_serv <- DSERRA3Q086SBEA # note that services are only provided in percent change
# calculate change in consumption
consumption <- qrtly_ND + qrtly_serv
dates <- index(consumption)
nobs <- length(dates)
consumption <- as.numeric(consumption)
cons_chg <- as.matrix(100*(log(consumption[2:nobs]/consumption[1:(nobs-1)])))
rm(list = ls())
library(quantmod)
getSymbols(c("DNDGRA3Q086SBEA", "DSERRA3Q086SBEA"), src='FRED') # quarterly
library(knitr)
qrtly_ND <- DNDGRA3Q086SBEA
qrtly_serv <- DSERRA3Q086SBEA # note that services are only provided in percent change
consumption <- qrtly_ND + qrtly_serv
dates <- index(consumption)
nobs <- length(dates)
consumption <- as.numeric(consumption)
cons_chg <- as.matrix(100*(log(consumption[2:nobs]/consumption[1:(nobs-1)])))
size_portfolios <- read.csv("../data/ME_returns_monthly.CSV",
stringsAsFactors = F)
size_portfolios$month <- size_portfolios$date %% 100
BEME_portfolios <- read.csv("../data/BEME_returns_monthly.CSV",
stringsAsFactors = F)
BEME_portfolios$month <- BEME_portfolios$date %% 100
drop_ind <- which(size_portfolios$date < 194700)
BEME_portfolios <- BEME_portfolios[-drop_ind, ]
size_portfolios <- size_portfolios[-drop_ind, ]
qrt_ind <- which(BEME_portfolios$month %in% c(3, 6, 9, 12))
size_qrtly <- matrix(data = NA, nrow = length(qrt_ind), ncol = 10)
BEME_qrtly <- matrix(data = NA, nrow = length(qrt_ind), ncol = 10)
size_mthly <- size_portfolios[, c(-1, -12)]/100
BEME_mthly <- BEME_portfolios[, c(-1, -12)]/100
for(i in 1:length(qrt_ind)){
# index of returns within a quarter
qind <- (qrt_ind[i]-2):qrt_ind[i]
# returns for each month within a quarter
size_returns <- (1 + size_mthly[qind, ])^(1/3)
BEME_returns <- (1 + BEME_mthly[qind, ])^(1/3)
# aggregate return for each quarter
size_qrtly[i, ] <- 100*(apply(X = size_returns, MARGIN = 2, FUN = prod)-1)
BEME_qrtly[i, ] <- 100*(apply(X = BEME_returns, MARGIN = 2, FUN = prod)-1)
}
length(size_portfolios$date[qrt_ind]) - length(dates)
x <- cbind(1, cons_chg)
ts_regressions <- function(y){return(solve(t(x)%*%x)%*%t(x)%*%y)}
size_estimates <- apply(X = size_qrtly[-1, ], MARGIN = 2, FUN = ts_regressions)
size_betas <- size_estimates[2, ]
BEME_estimates <- apply(X = BEME_qrtly[-1, ], MARGIN = 2, FUN = ts_regressions)
BEME_betas <- BEME_estimates[2, ]
size_ER <- colMeans(size_qrtly[-1, ]); BEME_ER <- colMeans(BEME_qrtly[-1, ])
ts_mat <- rbind(size_ER, size_estimates, BEME_ER, BEME_estimates)
colnames(ts_mat) <- paste("d", 1:10, sep = '')
rownames(ts_mat) <- c("E(R) size", "alpha size", "beta size",
"E(R) BE/ME", "alpha BE/ME", "beta BE/ME")
lambda_size <- solve(t(size_betas)%*%size_betas) %*% t(size_betas) %*% (size_ER)
lambda_BEME <- solve(t(BEME_betas)%*%BEME_betas) %*% t(BEME_betas) %*% (BEME_ER)
par(mar = c(5, 5.1, 4, 1))
par(ps = 20)
par(mfrow = c(1, 2))
plot(size_betas, size_ER,
ylim = c(0, max(size_ER)), xlim = c(0, max(size_betas)),
xlab = expression(beta), ylab = "Mean quarterly return % (Size Portfolios)",
main = paste("lambda=", round(lambda_size, 3)))
abline(lm(size_ER~size_betas + 0))
plot(BEME_betas, BEME_ER,
ylim = c(0, max(BEME_ER)), xlim = c(0, max(BEME_betas)),
xlab = expression(beta), ylab = "Mean quarterly return % (BE/ME Portfolios)",
main = paste("lambda = ", round(lambda_BEME, 3)))
abline(lm(BEME_ER~BEME_betas + 0))
BEME_estimates
ts_mat
#===============================================================================
# Finance 921: Assignment 3
# Question 1 part c (test of consumption-based CAPM)
#===============================================================================
rm(list = ls())
library(quantmod)
library(knitr)
#===============================================================================
# Load data
#===============================================================================
# first complete analysis with quarterly data
getSymbols(c("DNDGRA3Q086SBEA", "DSERRA3Q086SBEA"), src='FRED') # quarterly
qrtly_ND <- DNDGRA3Q086SBEA
qrtly_serv <- DSERRA3Q086SBEA # note that services are only provided in percent change
# calculate change in consumption
consumption <- qrtly_ND + qrtly_serv
dates <- index(consumption)
nobs <- length(dates)
consumption <- as.numeric(consumption)
cons_chg <- as.matrix(100*(log(consumption[2:nobs]/consumption[1:(nobs-1)])))
# load return data
size_portfolios <- read.csv("../data/ME_returns_monthly.CSV",
stringsAsFactors = F)
size_portfolios$month <- size_portfolios$date %% 100
BEME_portfolios <- read.csv("../data/BEME_returns_monthly.CSV",
stringsAsFactors = F)
BEME_portfolios$month <- BEME_portfolios$date %% 100
# subset to same dates as consumption series
drop_ind <- which(size_portfolios$date < 194700)
BEME_portfolios <- BEME_portfolios[-drop_ind, ]
size_portfolios <- size_portfolios[-drop_ind, ]
# find the rows that are an end of quarter month
qrt_ind <- which(BEME_portfolios$month %in% c(3, 6, 9, 12))
# set up monthly and quarterly returns
size_qrtly <- matrix(data = NA, nrow = length(qrt_ind), ncol = 10)
BEME_qrtly <- matrix(data = NA, nrow = length(qrt_ind), ncol = 10)
size_mthly <- size_portfolios[, c(-1, -12)]/100
BEME_mthly <- BEME_portfolios[, c(-1, -12)]/100
# aggregate to quarterly returns
for(i in 1:length(qrt_ind)){
# index of returns within a quarter
qind <- (qrt_ind[i]-2):qrt_ind[i]
# returns for each month within a quarter
size_returns <- (1 + size_mthly[qind, ])^(1/3)
BEME_returns <- (1 + BEME_mthly[qind, ])^(1/3)
# aggregate return for each quarter
size_qrtly[i, ] <- 100*(apply(X = size_returns, MARGIN = 2, FUN = prod)-1)
BEME_qrtly[i, ] <- 100*(apply(X = BEME_returns, MARGIN = 2, FUN = prod)-1)
}
# check that consumption and returns have the same number of observations
length(size_portfolios$date[qrt_ind]) - length(dates)
#===============================================================================
# Run the time series and cross sectional regressions using FM procedure
#===============================================================================
# time series regression
x <- cbind(1, cons_chg)
ts_regressions <- function(y){return(solve(t(x)%*%x)%*%t(x)%*%y)}
# time series regression for size portfolios
size_estimates <- apply(X = size_qrtly[-1, ], MARGIN = 2, FUN = ts_regressions)
size_betas <- size_estimates[2, ]
# time series regression for BE/ME portfolios
BEME_estimates <- apply(X = BEME_qrtly[-1, ], MARGIN = 2, FUN = ts_regressions)
BEME_betas <- BEME_estimates[2, ]
# unconditional mean of returns for size and be/me portfolios
size_ER <- colMeans(size_qrtly[-1, ]); BEME_ER <- colMeans(BEME_qrtly[-1, ])
# make summary table
ts_mat <- rbind(size_ER, size_estimates, BEME_ER, BEME_estimates)
colnames(ts_mat) <- paste("d", 1:10, sep = '')
rownames(ts_mat) <- c("E(R) size", "alpha size", "beta size",
"E(R) BE/ME", "alpha BE/ME", "beta BE/ME")
# cross sectional regression (don't impose an intercept here)
lambda_size <- solve(t(size_betas)%*%size_betas) %*% t(size_betas) %*% (size_ER)
lambda_BEME <- solve(t(BEME_betas)%*%BEME_betas) %*% t(BEME_betas) %*% (BEME_ER)
# plot betas vs expected returns with market price of risk line
par(mar = c(5, 5.1, 4, 1))
par(ps = 20)
par(mfrow = c(1, 2))
plot(size_betas, size_ER,
ylim = c(0, max(size_ER)), xlim = c(0, max(size_betas)),
xlab = expression(beta), ylab = "Mean quarterly return % (Size Portfolios)",
main = paste("lambda=", round(lambda_size, 3)))
abline(lm(size_ER~size_betas + 0))
plot(BEME_betas, BEME_ER,
ylim = c(0, max(BEME_ER)), xlim = c(0, max(BEME_betas)),
xlab = expression(beta), ylab = "Mean quarterly return % (BE/ME Portfolios)",
main = paste("lambda = ", round(lambda_BEME, 3)))
abline(lm(BEME_ER~BEME_betas + 0))
#===============================================================================
# Using GMM
#===============================================================================
GMM_size_estimates <- apply(X = size_qrtly[-1, ],
MARGIN = 2, FUN = GMM_esimtation)
GMM_BEME_estimates <- apply(X = BEME_qrtly[-1, ],
MARGIN = 2, FUN = GMM_esimtation)
CCAPM_GMM <- function(theta, X){
W <- diag(30)
# parameters which we want to estimate
a <- theta[1:10]
beta <- theta[11:20]
lambda <- theta[21]
# the data to be used in calculate the g function
returns <- X[-1, ]
cgrowth <- cons_chg
nobs <- length(cgrowth)
# calculate the error at each observation for the "g" function
error1 <- matrix(data = NA, nrow = nobs, ncol = ncol(returns))
error2 <- error1; error3 <- error1
for(i in 1:nobs){
error1[i, ] <- returns[i, ] - a - beta * cgrowth[i]
error2[i, ] <- (returns[i, ] - a - beta * cgrowth[i]) * cgrowth[i]
error3[i, ] <- returns[i, ] - beta * lambda
}
# estimate of moment conditions for given parameters
errors <- cbind(error1, error2, error3)
average_error <- as.matrix(colSums(errors)/nobs)
criterion <- t(average_error) %*% W %*% average_error
#return(errors)
return(criterion)
}
GMM_estimates <- optim(par = rep(0, 21), fn = CCAPM_GMM,
X = size_qrtly, method = "SANN")
GMM_estimates$par
x <- CCAPM_GMM(theta = rep(1, 21), X = size_qrtly)
gmm(g = CCAPM_GMM, x = size_qrtly, t0 = rep(0, 21), prewhite = 0)
#################################################################################
# Test of GMM with package. Why is it so sensitive to initial conditions?
#################################################################################
CCAPM_GMM_OLS <- function(theta, X){
# parameters which we want to estimate
beta <- theta
# the data to be used in calculate the g function
returns <- X[-1, ]
cgrowth <- cons_chg
nobs <- length(cgrowth)
# calculate the error at each observation for the "g" function
errors <- matrix(data = NA, nrow = nobs, ncol = ncol(returns))
for(i in 1:nobs){
errors[i, ] <- returns[i, ] - beta * cgrowth[i]
}
# estimate of moment conditions for given parameters
# returns a matrix that is n(number of observations) x q(number of moments)
return(errors)
}
test <-CCAPM_GMM_OLS(theta = rep(0, 10), X = size_qrtly)
size_gmm <- gmm(g = CCAPM_GMM_OLS, x = size_qrtly,
t0 = rep(1, 10),
wmatrix = "optimal",
vcov = "HAC")
size_gmm$coefficients
ts_mat
optim(par = rep(0, 21), fn = CCAPM_GMM,
X = size_qrtly, method = "SANN")
rep(0, 21)
GMM_estimates <- optim(par = rep(0, 21), fn = CCAPM_GMM,
X = size_qrtly, method = "SANN")
GMM_estimates$par
GMM_estimates <- optim(par = rep(1, 21), fn = CCAPM_GMM,
X = size_qrtly, method = "SANN")
GMM_estimates <- optim(par = c(rep(0, 10), rep(1, 11)), fn = CCAPM_GMM,
X = size_qrtly, method = "SANN")
GMM_estimates$par
